name: automate-newsletter-project-deploy
on:
  push:
    branches:
      - automate_deploy
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
            #- uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8

    - name: Create a Python dist

      # Set env vars
      env:
              HOST: ${{ secrets.HOST }}
              USERNAME: ${{ secrets.USERNAME }}
      run: |
              # Clone the Python Dist repo
              git clone https://github.com/shivahari/qxf2_newsletter_app.git

              # Update the newsletter_automation submodule
              cd ./qxf2_newsletter_app
              git submodule update --recursive

              # Create a Python Dist
              python setup.py sdist

              # Set cwd as Working dir
              echo "WORK_DIR=`pwd`" >> $GITHUB_ENV
        
    - name: Print env variable
      run: echo "${{ env.WORK_DIR }}"

    - name: copy file via ssh key
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        port: 22
        key: ${{ secrets.KEY }}
        source: "${{ env.WORK_DIR }}/dist/*.tar.gz"
        target: "/home/ubuntu"

    #          # Setup pem key
    #          echo "${{ secrets.KEY }}" > secret.pem
    #          cat secret.pem
    #          chmod 400 secret.pem

    #          # Copy the Python Dist to remote server
    #          scp -o StrictHostKeyChecking=no -i secret.pem ./dist/*.tar.gz "$USERNAME"@"$HOST":/home/ubuntu
        
    #- name: Connect to the instance
    #  run: |
    #    ssh -i secret.pem ubuntu@15.207.110.45 bash /home/ubuntu/deploy_flask.sh
    #    ssh -i secret.pem ubuntu@15.207.110.45 bash /home/ubuntu/check_app_status.sh

    # - name: Verify flask app is running
    #   run: |
    #     END=$((SECONDS+30))
    #     while [ $SECONDS -lt $END ]; do
    #       status = `curl -s -o /dev/null -w "%{http_code}" http://15.207.110.45:8080`
    #       if [ "$status" -eq 200 ]; then
    #         STARTED=1;
    #         echo "Service started successfully";
    #         break
    #       fi
    #       echo "Not started yet"
    #       sleep 2
    #     done
    #     if [ "$STARTED" = ""]; then
    #       exit 1
    #   shell: bash
    # - name: Analysing the code with pylint
    #   run:
    #     python -m pylint --fail-under=9 $(git ls-files '*.py')
